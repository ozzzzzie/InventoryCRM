@model IEnumerable<NAIMS.Models.Product>

@{
    ViewData["Title"] = "Local Inventory"; // set the page title
}

<style>
    .table-responsive.text-nowrap table {
        font-size: 14px;
    }

    .pagination {
        display: flex;
        justify-content: center;

    }

    .page-item {
        margin: 0 5px;
    }

    .sortable {
        cursor: pointer;
    }

        .sortable i {
            margin-left: 5px;
        }
</style>

<h1>Local Inventory</h1> <!--// heading for the page-->

<div class="d-flex justify-content-end">
    <div class="mr-2">
        <a asp-controller="Products" asp-action="MovingItems" class="btn btn-dark">Move Products</a> <!-- // button to move products-->
    </div>
    <div class="btn-group" style="padding-left: 10px;">
        <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Stock Reports
        </button> <!-- // dropdown button for stock reports-->
        <ul class="dropdown-menu">
            <li>
                <h6 class="dropdown-header text-uppercase">Stock Reports</h6>
            </li>
            <li><a asp-controller="Stocks" asp-action="LocalStockReport" class="dropdown-item">All Products</a></li>
            <li><a asp-controller="Stocks" asp-action="LocalPickUpItems" class="dropdown-item">Pick Up Needed</a></li>
            <li><a asp-controller="Stocks" asp-action="LocalLowStockItems" class="dropdown-item">Low Stock</a></li>
            <li><a asp-controller="Stocks" asp-action="LocalInStockItems" class="dropdown-item">In Stock</a></li>
        </ul> <!--// dropdown menu items for different stock reports-->
    </div>
</div>
<br />

<div class="card">
    <div class="table-responsive text-nowrap">
        <table class="table table-hover" id="localTable">
            <thead>
                <tr>
                    <!-- sortable headers with icons for sorting indication -->
                    <th class="sortable" onclick="sortTable(0)">Barcode <i class="bx bx-sort"></i></th>
                    <th class="sortable" onclick="sortTable(1)">Name <i class="bx bx-sort"></i></th>
                    <th class="sortable" onclick="sortTable(2)">Brand <i class="bx bx-sort"></i></th>
                    <th class="sortable" onclick="sortTable(3)">Size <i class="bx bx-sort"></i></th>
                    <th class="sortable" onclick="sortTable(4)">Quantity <i class="bx bx-sort"></i></th>
                    <th class="sortable" onclick="sortTable(5)">Status <i class="bx bx-sort"></i></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <!-- display each inventory item -->
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Barcode</td>
                        <td>@item.Pname</td>
                        <td>
                            @if (item.BrandId == 1)
                            {
                                <text>milk_shake</text>
                            }
                            else if (item.BrandId == 2)
                            {
                                <text>depot</text>
                            }
                            else if (item.BrandId == 3)
                            {
                                <text>simply zen</text>
                            }
                            else
                            {
                                @Html.DisplayFor(modelItem => item.BrandId)
                            }
                        </td>
                        <td>@item.Size</td>
                        <td>@Html.DisplayFor(modelItem => item.LocalQty)</td>
                        <td>
                            @if (item.LocalStatus == "low stock")
                            {
                                <span class="badge rounded-pill bg-warning">@Html.DisplayFor(modelItem => item.LocalStatus)</span>
                            }
                            else if (item.LocalStatus == "pick up needed")
                            {
                                <span class="badge rounded-pill bg-danger">@Html.DisplayFor(modelItem => item.LocalStatus)</span>
                            }
                            else if (item.LocalStatus == "in stock")
                            {
                                <span class="badge rounded-pill bg-success">@Html.DisplayFor(modelItem => item.LocalStatus)</span>
                            }
                        </td>
                        <td>
                            <div class="dropdown">
                                <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item" asp-action="Edit" asp-route-id="@item.ProductId"><i class="bx bx-edit-alt me-1"></i> Edit</a>
                                    <a class="dropdown-item" asp-action="Details" asp-route-id="@item.ProductId"><i class="bx bx-info-circle"></i> Details</a>
                                    <a class="dropdown-item" asp-action="Delete" asp-route-id="@item.ProductId"><i class="bx bx-trash me-1"></i> Delete</a>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
<div class="pagination">
    <ul id="pagination" class="pagination"></ul>
</div>

<!-- include jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        var table = '#localTable';
        var rowsPerPage = 20;  // number of rows to display per page
        var rows = $(table + ' tbody tr');
        var rowsCount = rows.length;
        var pageCount = Math.ceil(rowsCount / rowsPerPage);
        var numbers = $('#pagination');

        // function to update table to show rows for the current page
        function updateTable(start, end) {
            $(table + ' tbody tr').hide().slice(start, end).show();
        }

        // generate pagination buttons
        for (var i = 0; i < pageCount; i++) {
            numbers.append('<li class="page-item"><a class="page-link" href="#">' + (i + 1) + '</a></li>');
        }

        // show the first page of rows initially
        $(table + ' tbody tr').hide();
        $(table + ' tbody tr').slice(0, rowsPerPage).show();
        $('#pagination li:first-child a').addClass('active');

        // handle pagination click event
        $('#pagination a').click(function (e) {
            e.preventDefault();
            $('#pagination a').removeClass('active');
            $(this).addClass('active');
            var page = $(this).text() - 1;
            var start = page * rowsPerPage;
            var end = start + rowsPerPage;
            updateTable(start, end);
        });
    });

    // function to sort the table
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("localTable");
        switching = true;
        dir = "asc"; // set the sorting direction to ascending
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
        updateSortIcons(n, dir); // update the sort icons based on the sort direction
    }

    // function to update sort icons
    function updateSortIcons(columnIndex, direction) {
        var headers = document.querySelectorAll(".sortable");
        headers.forEach(function (header, index) {
            var icon = header.querySelector("i");
            if (index === columnIndex) {
                if (direction === "asc") {
                    icon.className = "bx bx-sort-up";
                } else {
                    icon.className = "bx bx-sort-down";
                }
            } else {
                icon.className = "bx bx-sort";
            }
        });
    }
</script>
